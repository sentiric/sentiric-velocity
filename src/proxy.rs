use crate::{cache::CacheManager, config, management};
use anyhow::Result;
use hyper::server::conn::Http;
use hyper::service::service_fn; // DÃ¼zeltildi
use std::net::SocketAddr;
use std::sync::Arc;
use tokio::net::TcpListener;
use tracing::{error, info};

// Fonksiyon artÄ±k cache_manager'Ä± argÃ¼man olarak alÄ±yor
pub async fn start_server(cache_manager: Arc<CacheManager>) -> Result<()> {
    let config = config::get();

    // YÃ¶netim sunucusunu ayrÄ± bir gÃ¶revde baÅŸlat ve cache'i ona da ver
    let management_cache = cache_manager.clone();
    tokio::spawn(management::start_management_server(management_cache));

    let addr = format!("{}:{}", config.proxy.bind_address, config.proxy.port).parse::<SocketAddr>()?;

    let listener = TcpListener::bind(addr).await?;
    info!("ğŸš€ VeloCache proxy sunucusu baÅŸlatÄ±ldÄ±: http://{}", addr);
    info!("âœ… YÃ¶netim arayÃ¼zÃ¼: http://{}:{}", config.management.bind_address, config.management.port);

    loop {
        let (stream, _) = listener.accept().await?;
        
        // Her yeni baÄŸlantÄ± iÃ§in cache'in bir kopyasÄ±nÄ± (Arc clone) al
        let cache_clone = cache_manager.clone();
        
        tokio::spawn(async move {
            // service_fn'e cache'i de geÃ§ir
            let service = service_fn(move |req| {
                crate::handler::proxy_handler(req, cache_clone.clone())
            });

            if let Err(err) = Http::new().serve_connection(stream, service).await {
                // BaÄŸlantÄ± kapandÄ±ÄŸÄ±nda gelen "error shutting down" hatasÄ±nÄ± gÃ¶rmezden gel
                if !err.to_string().contains("error shutting down") {
                    error!("Ä°stemci baÄŸlantÄ±sÄ±nda hata: {}", err);
                }
            }
        });
    }
}